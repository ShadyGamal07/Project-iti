// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Grad_Project.Models;

namespace Grad_Project.Data
{
    public partial class ProjectItiContext : DbContext
    {
        public ProjectItiContext()
        {
        }

        public ProjectItiContext(DbContextOptions<ProjectItiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<cart> carts { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<review> reviews { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=project-iti;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<cart>(entity =>
            {
                entity.ToTable("cart");

                //entity.Property(e => e.id).ValueGeneratedNever();

                entity.HasOne(d => d.product)
                    .WithMany(p => p.carts)
                    .HasForeignKey(d => d.productID)
                    .HasConstraintName("FK_cart_product");
            });

            modelBuilder.Entity<category>(entity =>
            {
                entity.ToTable("category");

                entity.Property(e => e.id).ValueGeneratedNever();
            });

            modelBuilder.Entity<product>(entity =>
            {
                entity.ToTable("product");

                entity.Property(e => e.price).HasColumnType("decimal(18, 0)");

                entity.HasOne(d => d.cat)
                    .WithMany(p => p.products)
                    .HasForeignKey(d => d.cat_id)
                    .HasConstraintName("FK_product_category");
            });

            modelBuilder.Entity<review>(entity =>
            {
                entity.ToTable("review");

                entity.Property(e => e.id).ValueGeneratedNever();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}